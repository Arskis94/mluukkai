{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","catch","error","alert","notesToShow","filter","map","key","find","n","changedNote","returnedNote","setTimeout","toggleImportanceOf","onSubmit","e","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"mNAYeA,EAVF,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACZC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACI,wBAAIC,UAAU,QACbJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCiB7B,EArBA,WACX,IAAMK,EAAUC,IAAMC,IAHV,cAINC,EAAc,CAChBC,GAAI,IACJN,QAAS,mCACTO,KAAM,2BACNT,WAAW,GAEf,OAAOI,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAa1C,EAVA,SAAAO,GAEX,OADgBT,IAAMU,KAdV,aAcwBD,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACJ,EAAIM,GAEhB,OADgBT,IAAMW,IAAN,UAnBJ,aAmBI,YAAwBR,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCP9BK,EAZM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAgB,OAAZA,EACO,KAIP,yBAAKjB,UAAU,SACViB,ICOEC,EAdA,WAMX,OACI,yBAAKC,MANW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAIN,6BACA,sGC2FGC,EA9FH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEUF,mBAAS,IAFnB,mBAEbG,EAFa,KAEJC,EAFI,OAGUJ,oBAAS,GAHnB,mBAGbK,EAHa,KAGJC,EAHI,OAIoBN,mBAAS,sBAJ7B,mBAIbO,EAJa,KAICC,EAJD,KAMhBC,qBAAU,WACRC,IAEGzB,MAAK,SAAA0B,GACJT,EAASS,MAEVC,OAAM,SAAAC,GACLC,MAAM,gBAET,IAEH,IA0CMC,EAAcV,EAAUJ,EAAQA,EAAMe,QAAO,SAAA5C,GAAI,OAAIA,EAAKG,aAWhE,OACE,6BACE,qCACA,kBAAC,EAAD,CAAckB,QAASc,IACvB,6BACE,4BAAQ7B,QAAS,kBAAM4B,GAAYD,KAAnC,QACQA,EAAU,WAAa,QAGjC,4BAjBeU,EAAYE,KAAI,SAAA7C,GAAI,OACrC,kBAAC,EAAD,CACE8C,IAAK9C,EAAKW,GACVX,KAAMA,EACNC,iBAAkB,kBAjDK,SAAAU,GACzB,IAAMX,EAAO6B,EAAMkB,MAAK,SAAAC,GAAC,OAAIA,EAAErC,KAAOA,KACpCsC,EAAW,eAAQjD,EAAR,CAAcG,WAAYH,EAAKG,YAE5CmC,EACU3B,EAAIsC,GACXpC,MAAK,SAAAqC,GACJpB,EAASD,EAAMgB,KAAI,SAAA7C,GAAI,OAAIA,EAAKW,KAAOA,EAAKX,EAAOkD,SAEpDV,OAAM,SAAAC,GACLL,EAAgB,SAAD,OACJpC,EAAKK,QADD,0CAGf8C,YAAW,WACTf,EAAgB,QACf,KACHN,EAASD,EAAMe,QAAO,SAAAI,GAAC,OAAIA,EAAErC,KAAOA,SAiCdyC,CAAmBpD,EAAKW,WAgBhD,0BAAM0C,SA5CM,SAACC,GACfA,EAAEC,iBACF,IAAMC,EAAa,CACjBnD,QAAS0B,EACTnB,MAAM,IAAI6C,MAAOC,cACjBvD,UAAWwD,KAAKC,SAAW,GAC3BjD,GAAIkB,EAAMgC,OAAS,GAGrBvB,EACUkB,GACP3C,MAAK,SAAAqC,GACJpB,EAASD,EAAMb,OAAOkC,IACtBlB,EAAW,SAgCX,2BACE8B,MAAO/B,EACPgC,SA9BiB,SAACT,GACxBtB,EAAWsB,EAAEU,OAAOF,UA+BhB,4BAAQG,KAAK,UAAb,SAEF,kBAAC,EAAD,Q,MC5FNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.326c48c9.chunk.js","sourcesContent":["import React from \"react\"\n\nconst Note = ({ note, toggleImportance}) => {\n    const label = note.important ? \"make not important\" : \"make important\"\n    return (\n        <li className=\"note\">\n        {note.content}\n        <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note","import axios from \"axios\"\nconst baseUrl = \"/api/notes\"\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    const nonExisting = {\n        id: 10000,\n        content: \"This note is not saved on server\",\n        date: \"2019-05-30T17:30:31.098Z\",\n        important: true\n    }\n    return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React from \"react\"\n\nconst Notification = ({message}) => {\n    if (message === null) {\n        return null\n    }\n    \n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React from \"react\"\n\nconst Footer = () => {\n    const footerStyle = {\n        color: \"green\",\n        fontStyle: \"italic\",\n        fontSize: 16\n    }\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em>Note app, Department of Computer Sciene, University of Helsinki 2019</em>\n        </div>\n    )\n}\n\nexport default Footer","import React, { useState, useEffect } from 'react'\nimport Note from \"./components/Note\"\nimport noteService from \"./services/notes\"\nimport Notification from \"./components/Notification\"\nimport Footer from \"./components/Footer\"\n\n\n\nconst App = () => {\n  const [notes, setNotes] = useState([]),\n    [newNote, setNewNote] = useState(\"\"),\n    [showAll, setShowAll] = useState(true),\n    [errorMessage, setErrorMessage] = useState(\"Some error message\")\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n      .catch(error => {\n        alert(\"Woopsie\")\n      })\n  }, [])\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id),\n      changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note \"${note.content}\" was already removed from the server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n\n  }\n\n  const addNote = (e) => {\n    e.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote(\"\")\n      })\n  }\n\n  const handleNoteChange = (e) => {\n    setNewNote(e.target.value)\n  }\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n      toggleImportance={() => toggleImportanceOf(note.id)}\n    />\n  )\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"imporant\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">Save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from \"./App\"\nimport \"./index.css\"\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}