{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","toggleImportanceOf","find","n","changedNote","returnedNote","map","catch","error","setTimeout","key","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d9536ae.chunk.js","sourcesContent":["import React from \"react\"\n\nconst Note = ({ note, toggleImportance}) => {\n    const label = note.important ? \"make not important\" : \"make important\"\n    return (\n        <li className=\"note\">\n        {note.content}\n        <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note","import React from \"react\"\n\nconst Notification = ({message}) => {\n    if (message === null) {\n        return null\n    }\n    \n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React from \"react\"\n\nconst Footer = () => {\n    const footerStyle = {\n        color: \"green\",\n        fontStyle: \"italic\",\n        fontSize: 16\n    }\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em>Note app, Department of Computer Sciene, University of Helsinki 2019</em>\n        </div>\n    )\n}\n\nexport default Footer","import axios from \"axios\"\nconst baseUrl = \"/api/notes\"\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  const nonExisting = {\n    id: 10000,\n    content: \"This note is not saved to server\",\n    date: \"2019-05-30T17:30:31.098Z\",\n    important: true\n  }\n  return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }\n","import React, { useState, useEffect } from \"react\"\nimport Note from \"./components/Note\"\nimport Notification from \"./components/Notification\"\nimport Footer from \"./components/Footer\"\nimport noteService from \"./services/notes\"\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState(\"\")\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    noteService.getAll().then(initialNotes => setNotes(initialNotes))\n  }, [])\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n  const rows = () =>\n    notesToShow.map(note => (\n      <Note\n        key={note.id}\n        note={note}\n        toggleImportance={() => toggleImportanceOf(note.id)}\n      />\n    ))\n\n  const handleNoteChange = event => {\n    setNewNote(event.target.value)\n  }\n\n  const addNote = event => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1\n    }\n\n    noteService\n      .create(noteObject)\n      .then(data => {\n        setNotes(notes.concat(data))\n        setNewNote(\"\")\n      })\n\n      .catch(error => {\n        setErrorMessage(error.response.data.error)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 10000)\n      })\n  }\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => (note.id !== id ? note : returnedNote)))\n      })\n\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n\n      <Notification message={errorMessage} />\n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>{rows()}</ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from \"./App\"\nimport \"./index.css\"\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}